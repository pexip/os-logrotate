From: =?utf-8?q?Christian_G=C3=B6ttsche?= <cgzones@googlemail.com>
Date: Wed, 2 Jun 2021 16:24:23 +0200
Applied-Upstream: https://github.com/logrotate/logrotate/commit/ec9a60aa458d15256056a6a86da13c281a595840
Subject: Do not use incorrect stat information

Do not the device number of the configuration file when verifying an
olddir configuration after creating the olddir.

Use different stat structs with more distinct names to avoid misuses.
---
 config.c | 38 ++++++++++++++++++++++++--------------
 1 file changed, 24 insertions(+), 14 deletions(-)

diff --git a/config.c b/config.c
index ebadb86..bbdbc45 100644
--- a/config.c
+++ b/config.c
@@ -961,7 +961,7 @@ static int readConfigFile(const char *configFile, struct logInfo *defConfig)
     char **scriptDest = NULL;
     struct logInfo *newlog = defConfig;
     char *start, *chptr;
-    struct stat sb;
+    struct stat sb_config;
     int state = STATE_DEFAULT;
     int logerror = 0;
     /* to check if incompatible criteria are specified */
@@ -988,13 +988,13 @@ static int readConfigFile(const char *configFile, struct logInfo *defConfig)
         message(MESS_ERROR, "Could not lock file %s for reading\n",
                 configFile);
     }
-    if (fstat(fd, &sb)) {
+    if (fstat(fd, &sb_config)) {
         message(MESS_ERROR, "fstat of %s failed: %s\n", configFile,
                 strerror(errno));
         close(fd);
         return 1;
     }
-    if (!S_ISREG(sb.st_mode)) {
+    if (!S_ISREG(sb_config.st_mode)) {
         message(MESS_DEBUG,
                 "Ignoring %s because it's not a regular file.\n",
                 configFile);
@@ -1010,13 +1010,13 @@ static int readConfigFile(const char *configFile, struct logInfo *defConfig)
     }
 
     if (getuid() == ROOT_UID) {
-        if ((sb.st_mode & 07533) != 0400) {
+        if ((sb_config.st_mode & 07533) != 0400) {
             message(MESS_DEBUG,
                     "Potentially dangerous mode on %s: 0%o\n",
-                    configFile, (unsigned) (sb.st_mode & 07777));
+                    configFile, (unsigned) (sb_config.st_mode & 07777));
         }
 
-        if (sb.st_mode & 0022) {
+        if (sb_config.st_mode & 0022) {
             message(MESS_ERROR,
                     "Ignoring %s because it is writable by group or others.\n",
                     configFile);
@@ -1024,7 +1024,7 @@ static int readConfigFile(const char *configFile, struct logInfo *defConfig)
             return 0;
         }
 
-        if (sb.st_uid != ROOT_UID) {
+        if (sb_config.st_uid != ROOT_UID) {
             message(MESS_ERROR,
                     "Ignoring %s because the file owner is wrong (should be root or user with uid 0).\n",
                     configFile);
@@ -1033,7 +1033,7 @@ static int readConfigFile(const char *configFile, struct logInfo *defConfig)
         }
     }
 
-    length = (size_t)sb.st_size;
+    length = (size_t)sb_config.st_size;
 
     if (length > 0xffffff) {
         message(MESS_ERROR, "file %s too large, probably not a config file.\n",
@@ -1804,10 +1804,11 @@ static int readConfigFile(const char *configFile, struct logInfo *defConfig)
 
                         for (glob_count = 0; glob_count < globResult.gl_pathc; glob_count++) {
                             struct logInfo *log;
+                            struct stat sb_glob;
 
                             /* if we glob directories we can get false matches */
-                            if (!lstat(globResult.gl_pathv[glob_count], &sb) &&
-                                    S_ISDIR(sb.st_mode)) {
+                            if (!lstat(globResult.gl_pathv[glob_count], &sb_glob) &&
+                                    S_ISDIR(sb_glob.st_mode)) {
                                 continue;
                             }
 
@@ -1871,7 +1872,8 @@ duperror:
                             char *ld;
                             char *dirpath;
                             const char *dirName;
-                            struct stat sb2;
+                            struct stat sb_logdir;
+                            struct stat sb_olddir;
 
                             dirpath = strdup(newlog->files[j]);
                             if (dirpath == NULL) {
@@ -1880,7 +1882,7 @@ duperror:
                             }
 
                             dirName = dirname(dirpath);
-                            if (stat(dirName, &sb2)) {
+                            if (stat(dirName, &sb_logdir)) {
                                 if (!(newlog->flags & LOG_FLAG_MISSINGOK)) {
                                     message(MESS_ERROR,
                                             "%s:%d error verifying log file "
@@ -1916,7 +1918,7 @@ duperror:
                                 dirName = newlog->oldDir;
                             }
 
-                            if (stat(dirName, &sb)) {
+                            if (stat(dirName, &sb_olddir)) {
                                 if (errno == ENOENT && (newlog->flags & LOG_FLAG_OLDDIRCREATE)) {
                                     int ret;
                                     if (newlog->flags & LOG_FLAG_SU) {
@@ -1937,6 +1939,14 @@ duperror:
                                         free(ld);
                                         goto error;
                                     }
+
+                                    if (stat(dirName, &sb_olddir) != 0) {
+                                        message(MESS_ERROR, "%s:%d error verifying created olddir "
+                                                "path %s: %s\n", configFile, lineNum,
+                                                dirName, strerror(errno));
+                                        free(ld);
+                                        goto error;
+                                    }
                                 }
                                 else {
                                     message(MESS_ERROR, "%s:%d error verifying olddir "
@@ -1949,7 +1959,7 @@ duperror:
 
                             free(ld);
 
-                            if (sb.st_dev != sb2.st_dev
+                            if (sb_logdir.st_dev != sb_olddir.st_dev
                                     && !(newlog->flags & (LOG_FLAG_COPYTRUNCATE | LOG_FLAG_COPY | LOG_FLAG_TMPFILENAME))) {
                                 message(MESS_ERROR,
                                         "%s:%d olddir %s and log file %s "
