From: =?utf-8?q?Christian_G=C3=B6ttsche?= <cgzones@googlemail.com>
Date: Mon, 17 Jan 2022 17:39:08 +0100
Applied-Upstream: https://github.com/logrotate/logrotate/commit/c7078c2b393fce376d79317a9a03de8b8e404cde
Subject: Do not lock state file /dev/null

#395 introduced /dev/null as supported state file path for cases when no
state file is desired.
lockState() tries to open and lock the state file to avoid issues with
concurrent instances, see #295.
Locking the character file /dev/null might either be not supported, e.g.
on Debian GNU/Hurd (hurd-i386), nor not allowed, e.g. by SELinux.
---
 logrotate.8.in | 2 ++
 logrotate.c    | 8 +++++++-
 2 files changed, 9 insertions(+), 1 deletion(-)

diff --git a/logrotate.8.in b/logrotate.8.in
index ef9dcdd..30e78e5 100644
--- a/logrotate.8.in
+++ b/logrotate.8.in
@@ -75,6 +75,8 @@ if \fBlogrotate\fR is being run as a different user for various sets of
 log files.  To prevent parallel execution \fBlogrotate\fR by default
 acquires a lock on the state file, if it cannot be acquired \fBlogrotate\fR
 will exit with value 3.  The default state file is \fI@STATE_FILE_PATH@\fR.
+If \fI/dev/null\fR is given as the state file, then \fBlogrotate\fR will
+not try to lock or write the state file.
 
 .TP
 \fB\-\-skip-state-lock\fR
diff --git a/logrotate.c b/logrotate.c
index bffcbf4..322e3af 100644
--- a/logrotate.c
+++ b/logrotate.c
@@ -2913,7 +2913,13 @@ static int readState(const char *stateFilename)
 
 static int lockState(const char *stateFilename, int skip_state_lock)
 {
-    int lockFd = open(stateFilename, O_RDWR | O_CLOEXEC);
+    int lockFd;
+
+    if (!strcmp(stateFilename, "/dev/null")) {
+        return 0;
+    }
+
+    lockFd = open(stateFilename, O_RDWR | O_CLOEXEC);
     if (lockFd == -1) {
         if (errno == ENOENT) {
             message(MESS_DEBUG, "Creating stub state file: %s\n",
